{"ast":null,"code":"import GVar from \"../const/GlobalVar\";\nimport axwrap from \"../component/AxWrap\";\nconst JoinAPI = {\n  getHashtagInfo: () => {\n    // hashtag 목록 가져오기\n    const token = localStorage.getItem(\"token\");\n    return axwrap.get(`${GVar.API_URL}/hashtag/`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n  },\n  joinUser: userData => {\n    // 유저 신규 가입\n    const token = localStorage.getItem(\"token\");\n    return axwrap.post(`${GVar.API_URL}/join/`, userData, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\"\n      }\n    });\n  },\n  IdCheck: id => {\n    const token = localStorage.getItem(\"token\");\n    return axwrap.post(`${GVar.API_URL}/idcheck/`, {\n      email: id\n    }, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\"\n      }\n    });\n  }\n};\nexport default JoinAPI;\n/*\n//user의 기부목록 가져오기\nexport const getDonationList = async () => {\n  const token = localStorage.getItem(\"token\");\n  try {\n    const response = await axios.get(`${GVar.API_URL}/donatelist`, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n    console.log(\"테스트\", response.data);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching user Donation list:\", error);\n    throw error;\n  }\n};\n\n// 사용자 정보 가져오기 - request url은 /users, get 요청, Authorization 헤더 필요\nexport const getUserInfo = async () => {\n  const token = localStorage.getItem(\"token\");\n  try {\n    const response = await axios.get(`${GVar.API_URL}/myinfo`, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching user info:\", error);\n    throw error;\n  }\n};\n\n// 유저 정보 수정\nexport const updateUserInfo = async () => {\n  const token = localStorage.getItem(\"token\");\n  try {\n    const response = await axios.patch(`${GVar.API_URL}/users/update`, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching user info:\", error);\n    throw error;\n  }\n};\n\n//유저 정보 삭제\nexport const deleteUser = async () => {\n  const token = localStorage.getItem(\"token\");\n  try {\n    const token = localStorage.getItem(\"token\");\n    const response = await axios.delete(`${GVar.API_URL}/users/delete`, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n    return response.status;\n  } catch (error) {\n    console.error(\"Error deleting user:\", error);\n    throw error;\n  }\n};\n\n//수혜신청\nexport const createApplication = async (dataSet) => {\n  const token = localStorage.getItem(\"token\");\n  try {\n    const response = await axios.post(`${GVar.API_URL}/apply/post`, dataSet, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    if (response.status === 200 || response.status === 201) {\n      return response.data;\n    } else {\n      console.error(\n        \"Create application request failed with status:\",\n        response.status\n      );\n      throw new Error(\"Create application request failed\");\n    }\n  } catch (error) {\n    console.error(\"Error fetching create application:\", error);\n    throw error;\n  }\n};\n\n//수혜신청 취소\nexport const cancelApplication = async (applyId) => {\n  const token = localStorage.getItem(\"token\");\n  try {\n    const response = await axios.delete(`${GVar.API_URL}/apply/${applyId}/delete`, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n    console.log(response.status);\n    return response.status;\n  } catch (error) {\n    console.error(\"Error deleting application:\", error);\n    throw error;\n  }\n};\n\n//수혜신청 수정\nexport const updateApplication = async (applyId, dataSet) => {\n  const token = localStorage.getItem(\"token\");\n  try {\n    const response = await axios.patch(\n      `${GVar.API_URL}/apply/${applyId}/update`,\n      dataSet,\n      {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      }\n    );\n    return response.data;\n  } catch (error) {\n    console.error(\"Error update application:\", error);\n    throw error;\n  }\n};\n\n//수혜신청 조회\nexport const getApplication = async (applyId) => {\n  const token = localStorage.getItem(\"token\");\n  try {\n    const response = await axios.get(`${GVar.API_URL}/apply/${applyId}`, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error get application:\", error);\n    throw error;\n  }\n};\n\n//기기 조회\nexport const getDevice = async (deviceId) => {\n  const token = localStorage.getItem(\"token\");\n  try {\n    const response = await axios.get(`${GVar.API_URL}/device/${deviceId}`, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error get device:\", error);\n    throw error;\n  }\n};\n\n//운송장번호,택배사입력(기부자)\nexport const updateDelivery = async (deviceId, dataSet) => {\n  const token = localStorage.getItem(\"token\");\n  try {\n    const response = await axios.patch(\n      `${GVar.API_URL}/donatelist/${deviceId}`,\n      dataSet,\n      {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      }\n    );\n    console.log(response.status);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error update delivery:\", error);\n    throw error;\n  }\n};\n\n//기기 수령확인 (수혜자)\nexport const confirmDelivery = async (applyId) => {\n  const token = localStorage.getItem(\"token\");\n  try {\n    const response = await axios.patch(\n      `${GVar.API_URL}/apply/complete/${applyId}`,\n      null,\n      {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      }\n    );\n    console.log(response.status);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error confirm delivery:\", error);\n    throw error;\n  }\n};\n*/","map":{"version":3,"names":["GVar","axwrap","JoinAPI","getHashtagInfo","token","localStorage","getItem","get","API_URL","headers","Authorization","joinUser","userData","post","IdCheck","id","email"],"sources":["/Users/jiyseo/Documents/4-2/Project/ajou_searfi/Ajou_Frontend/notice_app/src/API/JoinAPI.js"],"sourcesContent":["import GVar from \"../const/GlobalVar\";\nimport axwrap from \"../component/AxWrap\";\n\nconst JoinAPI = {\n\n  getHashtagInfo: () => { // hashtag 목록 가져오기\n    const token = localStorage.getItem(\"token\");\n\n    return axwrap.get(`${GVar.API_URL}/hashtag/`, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      }\n    });\n  },\n\n  joinUser: (userData) => { // 유저 신규 가입\n    const token = localStorage.getItem(\"token\");\n\n    return axwrap.post(`${GVar.API_URL}/join/`, userData, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\",\n      }\n    });\n  },\n\n  IdCheck: (id) => {\n    const token = localStorage.getItem(\"token\");\n\n    return axwrap.post(`${GVar.API_URL}/idcheck/`, {\n        email: id\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"application/json\",\n        }\n      });\n  },\n\n}\n\nexport default JoinAPI;\n/*\n//user의 기부목록 가져오기\nexport const getDonationList = async () => {\n  const token = localStorage.getItem(\"token\");\n  try {\n    const response = await axios.get(`${GVar.API_URL}/donatelist`, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n    console.log(\"테스트\", response.data);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching user Donation list:\", error);\n    throw error;\n  }\n};\n\n// 사용자 정보 가져오기 - request url은 /users, get 요청, Authorization 헤더 필요\nexport const getUserInfo = async () => {\n  const token = localStorage.getItem(\"token\");\n  try {\n    const response = await axios.get(`${GVar.API_URL}/myinfo`, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching user info:\", error);\n    throw error;\n  }\n};\n\n// 유저 정보 수정\nexport const updateUserInfo = async () => {\n  const token = localStorage.getItem(\"token\");\n  try {\n    const response = await axios.patch(`${GVar.API_URL}/users/update`, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching user info:\", error);\n    throw error;\n  }\n};\n\n//유저 정보 삭제\nexport const deleteUser = async () => {\n  const token = localStorage.getItem(\"token\");\n  try {\n    const token = localStorage.getItem(\"token\");\n    const response = await axios.delete(`${GVar.API_URL}/users/delete`, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n    return response.status;\n  } catch (error) {\n    console.error(\"Error deleting user:\", error);\n    throw error;\n  }\n};\n\n//수혜신청\nexport const createApplication = async (dataSet) => {\n  const token = localStorage.getItem(\"token\");\n  try {\n    const response = await axios.post(`${GVar.API_URL}/apply/post`, dataSet, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    if (response.status === 200 || response.status === 201) {\n      return response.data;\n    } else {\n      console.error(\n        \"Create application request failed with status:\",\n        response.status\n      );\n      throw new Error(\"Create application request failed\");\n    }\n  } catch (error) {\n    console.error(\"Error fetching create application:\", error);\n    throw error;\n  }\n};\n\n//수혜신청 취소\nexport const cancelApplication = async (applyId) => {\n  const token = localStorage.getItem(\"token\");\n  try {\n    const response = await axios.delete(`${GVar.API_URL}/apply/${applyId}/delete`, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n    console.log(response.status);\n    return response.status;\n  } catch (error) {\n    console.error(\"Error deleting application:\", error);\n    throw error;\n  }\n};\n\n//수혜신청 수정\nexport const updateApplication = async (applyId, dataSet) => {\n  const token = localStorage.getItem(\"token\");\n  try {\n    const response = await axios.patch(\n      `${GVar.API_URL}/apply/${applyId}/update`,\n      dataSet,\n      {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      }\n    );\n    return response.data;\n  } catch (error) {\n    console.error(\"Error update application:\", error);\n    throw error;\n  }\n};\n\n//수혜신청 조회\nexport const getApplication = async (applyId) => {\n  const token = localStorage.getItem(\"token\");\n  try {\n    const response = await axios.get(`${GVar.API_URL}/apply/${applyId}`, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error get application:\", error);\n    throw error;\n  }\n};\n\n//기기 조회\nexport const getDevice = async (deviceId) => {\n  const token = localStorage.getItem(\"token\");\n  try {\n    const response = await axios.get(`${GVar.API_URL}/device/${deviceId}`, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error get device:\", error);\n    throw error;\n  }\n};\n\n//운송장번호,택배사입력(기부자)\nexport const updateDelivery = async (deviceId, dataSet) => {\n  const token = localStorage.getItem(\"token\");\n  try {\n    const response = await axios.patch(\n      `${GVar.API_URL}/donatelist/${deviceId}`,\n      dataSet,\n      {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      }\n    );\n    console.log(response.status);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error update delivery:\", error);\n    throw error;\n  }\n};\n\n//기기 수령확인 (수혜자)\nexport const confirmDelivery = async (applyId) => {\n  const token = localStorage.getItem(\"token\");\n  try {\n    const response = await axios.patch(\n      `${GVar.API_URL}/apply/complete/${applyId}`,\n      null,\n      {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      }\n    );\n    console.log(response.status);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error confirm delivery:\", error);\n    throw error;\n  }\n};\n*/"],"mappings":"AAAA,OAAOA,IAAI,MAAM,oBAAoB;AACrC,OAAOC,MAAM,MAAM,qBAAqB;AAExC,MAAMC,OAAO,GAAG;EAEdC,cAAc,EAAEA,CAAA,KAAM;IAAE;IACtB,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAE3C,OAAOL,MAAM,CAACM,GAAG,CAAE,GAAEP,IAAI,CAACQ,OAAQ,WAAU,EAAE;MAC5CC,OAAO,EAAE;QACPC,aAAa,EAAG,UAASN,KAAM;MACjC;IACF,CAAC,CAAC;EACJ,CAAC;EAEDO,QAAQ,EAAGC,QAAQ,IAAK;IAAE;IACxB,MAAMR,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAE3C,OAAOL,MAAM,CAACY,IAAI,CAAE,GAAEb,IAAI,CAACQ,OAAQ,QAAO,EAAEI,QAAQ,EAAE;MACpDH,OAAO,EAAE;QACPC,aAAa,EAAG,UAASN,KAAM,EAAC;QAChC,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;EACJ,CAAC;EAEDU,OAAO,EAAGC,EAAE,IAAK;IACf,MAAMX,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAE3C,OAAOL,MAAM,CAACY,IAAI,CAAE,GAAEb,IAAI,CAACQ,OAAQ,WAAU,EAAE;MAC3CQ,KAAK,EAAED;IACT,CAAC,EAAE;MACDN,OAAO,EAAE;QACPC,aAAa,EAAG,UAASN,KAAM,EAAC;QAChC,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;EACN;AAEF,CAAC;AAED,eAAeF,OAAO;AACt},"metadata":{},"sourceType":"module","externalDependencies":[]}