{"ast":null,"code":"import axios from \"axios\";\nimport Swal from \"../component/Swal\";\naxios.defaults.headers.common[\"Access-Control-Allow-Origin\"] = \"*\";\nconst AxWrap = {\n  get: async (url, config) => {\n    try {\n      const response = await axios.get(url, config);\n      if (response.status >= 200 || response.status < 300) {\n        return response.data;\n      }\n      console.log(\"axwrap.get() \" + this.logErrorMessage({\n        response: response\n      }));\n      throw new Error(response);\n    } catch (error) {\n      console.log(\"axwrap.get() \" + this.logErrorMessage(error));\n      throw new Error(this.responseErr(error) ? error.response : {\n        status: 0\n      });\n    }\n  },\n  post: async (url, data, config) => {\n    console.log(\"axwrap.post() url=\" + url);\n    try {\n      let response = await axios.post(url, data, config);\n      console.log(response);\n      if (response.status >= 200 || response.status < 300) {\n        return response.data;\n      }\n      console.log(\"axwrap.post() \" + this.logErrorMessage({\n        response: response\n      }));\n      throw new Error(response);\n    } catch (error) {\n      console.log(\"axwrap.post() \" + this.logErrorMessage(error));\n      throw new Error(this.responseErr(error) ? error.response : {\n        status: 0\n      });\n    }\n  },\n  patch: async (url, data, config) => {\n    try {\n      const response = await axios.patch(url, data, config);\n      if (response.status >= 200 || response.status < 300) {\n        return response.data;\n      }\n      console.log(\"axwrap.patch() \" + this.logErrorMessage({\n        response: response\n      }));\n      throw new Error(response);\n    } catch (error) {\n      console.log(\"axwrap.patch() \" + this.logErrorMessage(error));\n      throw new Error(this.responseErr(error) ? error.response : {\n        status: 0\n      });\n    }\n  },\n  delete: async (url, config) => {\n    try {\n      const response = await axios.delete(url, config);\n      if (response.status >= 200 || response.status < 300) {\n        return response.status;\n      }\n      console.log(\"axwrap.delete() \" + this.logErrorMessage({\n        response: response\n      }));\n      throw new Error(response);\n    } catch (error) {\n      console.log(\"axwrap.delete() \" + this.logErrorMessage(error));\n      throw new Error(this.responseErr(error) ? error.response : {\n        status: 0\n      });\n    }\n  },\n  logErrorMessage: error => {\n    if (error.response) return \"error: \" + error.response.status;\n    if (error.request) return \"error: network error\";\n    return \"error:  unknown error\";\n  },\n  responseErr: error => {\n    if (error.response) return true;\n    if (error.request) {\n      Swal.alertErr(\"네트워크 오류가 발생했습니다.\");\n    } else {\n      Swal.alertErr(\"알 수 없는 오류가 발생했습니다.\");\n    }\n    return false;\n  }\n};\nexport default AxWrap;","map":{"version":3,"names":["axios","Swal","defaults","headers","common","AxWrap","get","url","config","response","status","data","console","log","logErrorMessage","Error","error","responseErr","post","patch","delete","request","alertErr"],"sources":["/Users/jiyseo/Documents/4-2/Project/ajou_searfi/Ajou_Frontend/notice_app/src/component/AxWrap.js"],"sourcesContent":["import axios from \"axios\";\nimport Swal from \"../component/Swal\";\n\naxios.defaults.headers.common[\"Access-Control-Allow-Origin\"] = \"*\";\n\nconst AxWrap = {\n  get: async (url, config) => {\n    try {\n      const response = await axios.get(url, config);\n      if (response.status >= 200 || response.status < 300) {\n        return response.data;\n      }\nconsole.log(\"axwrap.get() \" + this.logErrorMessage({response: response}));\n      throw new Error(response);\n    } catch (error) {\nconsole.log(\"axwrap.get() \" + this.logErrorMessage(error));\n      throw new Error(this.responseErr(error) ? error.response : { status: 0 });\n    }\n  },\n\n  post: async (url, data, config) => {\nconsole.log(\"axwrap.post() url=\"+url);\n\n    try {\n      let response = await axios.post(url, data, config);\nconsole.log(response);\n      if (response.status >= 200 || response.status < 300) {\n        return response.data;\n      }\nconsole.log(\"axwrap.post() \" + this.logErrorMessage({response: response}));\n      throw new Error(response);\n    } catch (error) {\nconsole.log(\"axwrap.post() \" + this.logErrorMessage(error));\n      throw new Error(this.responseErr(error) ? error.response : { status: 0 });\n    }\n  },\n\n  patch: async (url, data, config) => {\n    try {\n      const response = await axios.patch(url, data, config);\n      if (response.status >= 200 || response.status < 300) {\n        return response.data;\n      }\nconsole.log(\"axwrap.patch() \" + this.logErrorMessage({response: response}));\n      throw new Error(response);\n    } catch (error) {\nconsole.log(\"axwrap.patch() \" + this.logErrorMessage(error));\n      throw new Error(this.responseErr(error) ? error.response : { status: 0 });\n    }\n  },\n\n  delete: async (url, config) => {\n    try {\n      const response = await axios.delete(url, config);\n      if (response.status >= 200 || response.status < 300) {\n        return response.status;\n      }\nconsole.log(\"axwrap.delete() \" + this.logErrorMessage({response: response}));\n      throw new Error(response);\n    } catch (error) {\nconsole.log(\"axwrap.delete() \" + this.logErrorMessage(error));\n      throw new Error(this.responseErr(error) ? error.response : { status: 0 });\n    }\n  },\n\n  logErrorMessage: (error) => {\n    if (error.response) return \"error: \" + error.response.status;\n    if (error.request) return \"error: network error\";\n    return \"error:  unknown error\";\n  },\n\n  responseErr: (error) => {\n    if (error.response) return true;\n    if (error.request) {\n      Swal.alertErr(\"네트워크 오류가 발생했습니다.\");\n    } else {\n      Swal.alertErr(\"알 수 없는 오류가 발생했습니다.\");\n    }\n    return false;\n  }\n}\n\nexport default AxWrap;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}