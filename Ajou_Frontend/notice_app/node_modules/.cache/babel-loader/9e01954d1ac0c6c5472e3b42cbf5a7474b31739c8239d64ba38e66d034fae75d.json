{"ast":null,"code":"import axios from \"axios\";\nimport Swal from \"../component/Swal\";\nimport GVar from \"../const/GlobalVar\";\naxios.defaults.headers.common[\"Access-Control-Allow-Origin\"] = \"*\";\nconst AxWrap = {\n  defaultUrl: url => {\n    if (url.charAt(0) === '/') url = `${GVar.API_URL}${url}`;\n    url += '/'; // for test\n\n    return url;\n  },\n  get: async (url, config) => {\n    url = AxWrap.defaultUrl(url);\n    console.log(\"AxWrap.get() url=\" + url);\n    try {\n      const response = await axios.get(url, config);\n      if (response.status >= 200 || response.status < 300) {\n        return response.data;\n      }\n      console.log(\"AxWrap.get() \" + AxWrap.logErrorMessage({\n        response: response\n      }));\n      throw new Error(response);\n    } catch (error) {\n      console.log(\"AxWrap.get() \" + AxWrap.logErrorMessage(error));\n      throw new Error(AxWrap.responseErr(error) ? error.response : {\n        status: 0\n      });\n    }\n  },\n  post: async (url, data, config) => {\n    url = AxWrap.defaultUrl(url);\n    console.log(\"AxWrap.post() url=\" + url);\n    try {\n      const response = await axios.post(url, data, config);\n      console.log(response);\n      if (response.status >= 200 || response.status < 300) {\n        return response.data;\n      }\n      console.log(\"AxWrap.post() \" + AxWrap.logErrorMessage({\n        response: response\n      }));\n      throw new Error(response);\n    } catch (error) {\n      console.log(\"AxWrap.post() \" + AxWrap.logErrorMessage(error));\n      throw new Error(AxWrap.responseErr(error) ? error.response : {\n        status: 0\n      });\n    }\n  },\n  patch: async (url, data, config) => {\n    url = AxWrap.defaultUrl(url);\n    console.log(\"AxWrap.patch() url=\" + url);\n    try {\n      const response = await axios.patch(url, data, config);\n      if (response.status >= 200 || response.status < 300) {\n        return response.data;\n      }\n      console.log(\"AxWrap.patch() \" + AxWrap.logErrorMessage({\n        response: response\n      }));\n      throw new Error(response);\n    } catch (error) {\n      console.log(\"AxWrap.patch() \" + AxWrap.logErrorMessage(error));\n      throw new Error(AxWrap.responseErr(error) ? error.response : {\n        status: 0\n      });\n    }\n  },\n  delete: async (url, config) => {\n    url = AxWrap.defaultUrl(url);\n    console.log(\"AxWrap.patch() url=\" + url);\n    try {\n      const response = await axios.delete(url, config);\n      if (response.status >= 200 || response.status < 300) {\n        return response.status;\n      }\n      console.log(\"AxWrap.delete() \" + AxWrap.logErrorMessage({\n        response: response\n      }));\n      throw new Error(response);\n    } catch (error) {\n      console.log(\"AxWrap.delete() \" + AxWrap.logErrorMessage(error));\n      throw new Error(AxWrap.responseErr(error) ? error.response : {\n        status: 0\n      });\n    }\n  },\n  logErrorMessage: error => {\n    if (error.response) return \"error: \" + error.response.status;\n    if (error.request) return \"error: network error\";\n    return \"error:  unknown error\";\n  },\n  responseErr: error => {\n    if (error.response) return true;\n    if (error.request) {\n      Swal.alertErr(\"네트워크 오류가 발생했습니다.\");\n    } else {\n      Swal.alertErr(\"알 수 없는 오류가 발생했습니다.\");\n    }\n    return false;\n  }\n};\nexport default AxWrap;","map":{"version":3,"names":["axios","Swal","GVar","defaults","headers","common","AxWrap","defaultUrl","url","charAt","API_URL","get","config","console","log","response","status","data","logErrorMessage","Error","error","responseErr","post","patch","delete","request","alertErr"],"sources":["/Users/jiyseo/Documents/4-2/Project/ajou_searfi/Ajou_Frontend/notice_app/src/component/AxWrap.js"],"sourcesContent":["import axios from \"axios\";\nimport Swal from \"../component/Swal\";\n\nimport GVar from \"../const/GlobalVar\";\n\naxios.defaults.headers.common[\"Access-Control-Allow-Origin\"] = \"*\";\n\nconst AxWrap = {\n\n  defaultUrl: (url) => {\n    if (url.charAt(0) === '/') url = `${GVar.API_URL}${url}`;\n\nurl += '/'; // for test\n\n    return url;\n  },\n\n  get: async (url, config) => {\n    url = AxWrap.defaultUrl(url);\n\nconsole.log(\"AxWrap.get() url=\"+url);\n\n    try {\n\n      const response = await axios.get(url, config);\n      if (response.status >= 200 || response.status < 300) {\n        return response.data;\n      }\nconsole.log(\"AxWrap.get() \" + AxWrap.logErrorMessage({response: response}));\n      throw new Error(response);\n\n    } catch (error) {\n\nconsole.log(\"AxWrap.get() \" + AxWrap.logErrorMessage(error));\n      throw new Error(AxWrap.responseErr(error) ? error.response : { status: 0 });\n\n    }\n  },\n\n  post: async (url, data, config) => {\n    url = AxWrap.defaultUrl(url);\n\nconsole.log(\"AxWrap.post() url=\"+url);\n\n    try {\n\n      const response = await axios.post(url, data, config);\nconsole.log(response);\n      if (response.status >= 200 || response.status < 300) {\n        return response.data;\n      }\nconsole.log(\"AxWrap.post() \" + AxWrap.logErrorMessage({response: response}));\n      throw new Error(response);\n\n    } catch (error) {\n\nconsole.log(\"AxWrap.post() \" + AxWrap.logErrorMessage(error));\n      throw new Error(AxWrap.responseErr(error) ? error.response : { status: 0 });\n\n    }\n  },\n\n  patch: async (url, data, config) => {\n    url = AxWrap.defaultUrl(url);\n\nconsole.log(\"AxWrap.patch() url=\"+url);\n\n    try {\n\n      const response = await axios.patch(url, data, config);\n      if (response.status >= 200 || response.status < 300) {\n        return response.data;\n      }\nconsole.log(\"AxWrap.patch() \" + AxWrap.logErrorMessage({response: response}));\n      throw new Error(response);\n\n    } catch (error) {\n\nconsole.log(\"AxWrap.patch() \" + AxWrap.logErrorMessage(error));\n      throw new Error(AxWrap.responseErr(error) ? error.response : { status: 0 });\n\n    }\n  },\n\n  delete: async (url, config) => {\n    url = AxWrap.defaultUrl(url);\n\nconsole.log(\"AxWrap.patch() url=\"+url);\n\n    try {\n\n      const response = await axios.delete(url, config);\n      if (response.status >= 200 || response.status < 300) {\n        return response.status;\n      }\nconsole.log(\"AxWrap.delete() \" + AxWrap.logErrorMessage({response: response}));\n      throw new Error(response);\n\n    } catch (error) {\n\nconsole.log(\"AxWrap.delete() \" + AxWrap.logErrorMessage(error));\n      throw new Error(AxWrap.responseErr(error) ? error.response : { status: 0 });\n\n    }\n  },\n\n  logErrorMessage: (error) => {\n    if (error.response) return \"error: \" + error.response.status;\n    if (error.request) return \"error: network error\";\n    return \"error:  unknown error\";\n  },\n\n  responseErr: (error) => {\n    if (error.response) return true;\n    if (error.request) {\n      Swal.alertErr(\"네트워크 오류가 발생했습니다.\");\n    } else {\n      Swal.alertErr(\"알 수 없는 오류가 발생했습니다.\");\n    }\n    return false;\n  }\n\n}\n\nexport default AxWrap;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}